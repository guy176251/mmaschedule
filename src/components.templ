package main

import "mmaschedule-go/event"
import "strconv"
import "time"

templ TemplEventPage(e event.Event, upcoming []event.ListUpcomingEventsRow) {
	<html data-theme="night">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width"/>
			<link rel="stylesheet" type="text/css" href="/static/styles.css"/>
			<title>MMA Schedule</title>
		</head>
		<body>
			<div class="h-screen overflow-scroll bg-neutral-focus fill-neutral-content text-neutral-content">
				<div class="drawer drawer-mobile">
					<input id="my-drawer-3" type="checkbox" class="drawer-toggle"/>
					<div class="drawer-content flex flex-col">
						<div class="navbar sticky top-0 z-50 w-full bg-neutral text-neutral-content shadow-2xl">
							<div class="flex-none lg:hidden">
								<label for="my-drawer-3" class="btn btn-square btn-ghost text-xl">
									<svg class="inline h-6 w-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
										<path d="M4 6h16v2H4zm0 5h16v2H4zm0 5h16v2H4z"></path>
									</svg>
								</label>
							</div>
							<a href="/" class="btn btn-ghost text-xl normal-case">MMA Schedule</a>
						</div>
						<div class="hidden lg:block">
							<div
								class="h-[450px] bg-cover bg-[center_top_-14rem] fill-white text-white 2xl:h-[550px]"
								style={ "background-image: url(" + e.Image + ");" }
							>
								<div class="grid h-full w-full bg-black/50 px-32">
									<div class="flex flex-col place-self-center">
										<p class="border-b pb-4 text-6xl font-light tracking-tighter">
											{ e.Name }
										</p>
										<div class="justify-items-left grid w-fit gap-1 place-self-center pt-3 text-lg font-extrabold tracking-tighter">
											<p>
												@TemplIconCalendar("mr-2")
												@TemplTimestamp(e.Date)
											</p>
											if len(e.Location) > 0 {
												<p>
													@TemplIconLocation("mr-2")
													{ e.Location }
												</p>
											}
										</div>
									</div>
								</div>
							</div>
						</div>
						<div class="container mx-auto px-2 py-4">
							<div class="lg:hidden">
								<div class="hero mb-4 rounded bg-neutral">
									<div class="hero-content flex-col justify-between">
										<div class="flex-1 grow">
											<img
												src={ e.Image }
												class="aspect-[16/9] rounded-lg object-cover shadow-2xl"
											/>
										</div>
										<div class="flex w-full flex-1 grow flex-col items-center py-2">
											<p class="w-fit border-b-4 border-red-500 pb-3 text-3xl font-bold">
												{ e.Name }
											</p>
											<div>
												<div class="flex content-center pt-3 align-top">
													@TemplIconCalendar("mr-2")
													@TemplTimestamp(e.Date)
												</div>
												if len(e.Location) > 0 {
													<p class="pt-2">
														@TemplIconLocation("mr-1")
														{ e.Location }
													</p>
												}
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="flex flex-col gap-4">
								for _, f := range e.UnmarshalFights() {
									@TemplFightRow(f)
								}
							</div>
						</div>
					</div>
					<div class="drawer-side">
						<label for="my-drawer-3" class="drawer-overlay"></label>
						<ul class="menu w-80 bg-neutral p-4 text-neutral-content">
							<li>
								<a>
									<p class="mb-2 rounded-b-none border-b-2 border-accent pb-2 text-2xl">
										Upcoming Events
									</p>
								</a>
							</li>
							for _, u := range upcoming {
								<li class="menu-title">
									@TemplTimestamp(u.Date)
								</li>
								<li>
									<a class="pt-0" href={ templ.URL("/events/" + u.Slug + "/") }>
										{ u.Name }
									</a>
								</li>
							}
						</ul>
					</div>
				</div>
			</div>
			@TemplJSTimestamp()
		</body>
	</html>
}

templ TemplFightRow(f *event.Fight) {
	<div class="w-full rounded bg-neutral px-4 pb-4 pt-1 text-neutral-content">
		<div class="flex w-full justify-center">
			<p
				class="mb-4 w-fit border-b border-neutral-content pb-1 text-lg font-extrabold"
			>
				{ f.Weight }
			</p>
		</div>
		<div class="grid grid-cols-5">
			@TemplFighterCol(f.FighterA, false)
			<div class="flex px-2">
				<div class="w-full self-center">
					<p class="text-center text-2xl font-extrabold">VS</p>
				</div>
			</div>
			@TemplFighterCol(f.FighterB, true)
		</div>
	</div>
}

templ TemplFighterCol(f *event.Fighter, right bool) {
	<div class="col-span-2">
		<a
			if len(f.Link) > 0 {
				target="_blank"
				href={ templ.URL(f.Link) }
				class="no-underline hover:underline"
			}
		>
			<div
				if right {
					class="flex flex-col lg:flex-row lg:justify-end"
				} else {
					class="flex flex-col lg:flex-row"
				}
			>
				<img
					src={ f.Image }
					loading="lazy"
					alt=""
					if right {
						class="h-32 w-32 rounded object-cover object-top lg:order-2"
					} else {
						class="h-32 w-32 rounded object-cover object-top"
					}
				/>
				<div
					if right {
						class="           mt-3    border-t-8    border-blue-500
                               pt-1 text-right lg:order-1 lg:mx-5

                            lg:mt-0 lg:border-r-8 lg:border-t-0 lg:pr-5 lg:pt-0
                        "
					} else {
						class="           mt-3    border-t-8    border-red-500
                               pt-1 lg:mx-5 lg:mt-0 lg:border-l-8

                            lg:border-t-0 lg:pl-5 lg:pt-0
                        "
					}
				>
					<p class="mb-1 text-xl font-semibold lg:mb-4">
						{ f.Name }
					</p>
					if len(f.Country) > 0 {
						<p class="text-sm lg:text-base">
							{ f.Country }
						</p>
					}
				</div>
			</div>
		</a>
	</div>
}

templ TemplTimestamp(timestamp int64) {
	<span data-timestamp={ strconv.FormatInt(timestamp, 10) }>
		{ time.Unix(timestamp, 0).Format(time.RFC1123) }
	</span>
}

templ TemplIconLocation(class string) {
	<svg class={ "w-6 h-6 inline " + class } xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
		<path fill-rule="evenodd" d="M11.54 22.351l.07.04.028.016a.76.76 0 00.723 0l.028-.015.071-.041a16.975 16.975 0 001.144-.742 19.58 19.58 0 002.683-2.282c1.944-1.99 3.963-4.98 3.963-8.827a8.25 8.25 0 00-16.5 0c0 3.846 2.02 6.837 3.963 8.827a19.58 19.58 0 002.682 2.282 16.975 16.975 0 001.145.742zM12 13.5a3 3 0 100-6 3 3 0 000 6z" clip-rule="evenodd"></path>
	</svg>
}

templ TemplIconCalendar(class string) {
	<svg class={ "inline w-6 h-6 " + class } xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
		<path
			d="M5 22h14c1.103 0 2-.897 2-2V6c0-1.103-.897-2-2-2h-2V2h-2v2H9V2H7v2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2zM5 7h14v2H5V7z"
		></path>
	</svg>
}

templ TemplJSTimestamp() {
	<script>
        (() => {
            const DATA_TIMESTAMP = "data-timestamp";

            const MONTHS = [
                "Jan",
                "Feb",
                "Mar",
                "Apr",
                "May",
                "Jun",
                "Jul",
                "Aug",
                "Sep",
                "Oct",
                "Nov",
                "Dec",
            ];

            const DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

            for (const e of document.querySelectorAll(`[${DATA_TIMESTAMP}]`)) {
                const timestamp = e.getAttribute(DATA_TIMESTAMP);
                if (timestamp) {
                    e.innerHTML = dateStr(+timestamp);
                }
            }

            /** @param {number} timestamp */
            function dateStr(timestamp) {
                let d = new Date(timestamp * 1000);
                let day = d.getDate(),
                    month = MONTHS[d.getMonth()],
                    hour = d.getHours() % 12 || 12,
                    minute = `${d.getMinutes()}`.padStart(2, "0"),
                    pm = d.getHours() >= 12 ? "PM" : "AM",
                    dow = DAYS[d.getDay()];

                let timezone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();

                return `${dow} ${month} ${day}, ${hour}:${minute} ${pm} ${timezone}`;
            }
        })();
    </script>
}

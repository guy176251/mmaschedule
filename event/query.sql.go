// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package event

import (
	"context"
)

const createTapology = `-- name: CreateTapology :exec
INSERT INTO
  tapology (name, url)
VALUES
  (?, ?)
`

type CreateTapologyParams struct {
	Name string `json:"name"`
	Url  string `json:"url"`
}

func (q *Queries) CreateTapology(ctx context.Context, arg CreateTapologyParams) error {
	_, err := q.db.ExecContext(ctx, createTapology, arg.Name, arg.Url)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT
  url, slug, name, location, organization, image, date, fights, history
FROM
  event
WHERE
  slug = ?
LIMIT
  1
`

func (q *Queries) GetEvent(ctx context.Context, slug string) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, slug)
	var i Event
	err := row.Scan(
		&i.Url,
		&i.Slug,
		&i.Name,
		&i.Location,
		&i.Organization,
		&i.Image,
		&i.Date,
		&i.Fights,
		&i.History,
	)
	return i, err
}

const getTapology = `-- name: GetTapology :one
SELECT
  name, url
FROM
  tapology
WHERE
  name = ?
LIMIT
  1
`

func (q *Queries) GetTapology(ctx context.Context, name string) (Tapology, error) {
	row := q.db.QueryRowContext(ctx, getTapology, name)
	var i Tapology
	err := row.Scan(&i.Name, &i.Url)
	return i, err
}

const getUpcomingEvent = `-- name: GetUpcomingEvent :one
SELECT
  url, slug, name, location, organization, image, date, fights, history
FROM
  event
WHERE
  date >= ?
ORDER BY
  date ASC
LIMIT
  1
`

func (q *Queries) GetUpcomingEvent(ctx context.Context, date int64) (Event, error) {
	row := q.db.QueryRowContext(ctx, getUpcomingEvent, date)
	var i Event
	err := row.Scan(
		&i.Url,
		&i.Slug,
		&i.Name,
		&i.Location,
		&i.Organization,
		&i.Image,
		&i.Date,
		&i.Fights,
		&i.History,
	)
	return i, err
}

const listEvents = `-- name: ListEvents :many
SELECT
  url, slug, name, location, organization, image, date, fights, history
FROM
  event
`

func (q *Queries) ListEvents(ctx context.Context) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.Url,
			&i.Slug,
			&i.Name,
			&i.Location,
			&i.Organization,
			&i.Image,
			&i.Date,
			&i.Fights,
			&i.History,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingEvents = `-- name: ListUpcomingEvents :many
SELECT
  name,
  slug,
  date
FROM
  event
WHERE
  date >= ?
ORDER BY
  date ASC
`

type ListUpcomingEventsRow struct {
	Name string `json:"name"`
	Slug string `json:"slug"`
	Date int64  `json:"date"`
}

func (q *Queries) ListUpcomingEvents(ctx context.Context, date int64) ([]ListUpcomingEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, listUpcomingEvents, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUpcomingEventsRow
	for rows.Next() {
		var i ListUpcomingEventsRow
		if err := rows.Scan(&i.Name, &i.Slug, &i.Date); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
